// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeMessage struct {
	Rate                 uint32   `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Type                 uint32   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Channel              string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Window               uint32   `protobuf:"varint,4,opt,name=window,proto3" json:"window,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeMessage) Reset()         { *m = SubscribeMessage{} }
func (m *SubscribeMessage) String() string { return proto.CompactTextString(m) }
func (*SubscribeMessage) ProtoMessage()    {}
func (*SubscribeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

func (m *SubscribeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeMessage.Unmarshal(m, b)
}
func (m *SubscribeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeMessage.Marshal(b, m, deterministic)
}
func (m *SubscribeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeMessage.Merge(m, src)
}
func (m *SubscribeMessage) XXX_Size() int {
	return xxx_messageInfo_SubscribeMessage.Size(m)
}
func (m *SubscribeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeMessage proto.InternalMessageInfo

func (m *SubscribeMessage) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *SubscribeMessage) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SubscribeMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SubscribeMessage) GetWindow() uint32 {
	if m != nil {
		return m.Window
	}
	return 0
}

type NotificationMessage struct {
	Data                 []string          `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Sma                  []*SMAMeasurement `protobuf:"bytes,2,rep,name=sma,proto3" json:"sma,omitempty"`
	Topmuted             []*TopMutedData   `protobuf:"bytes,3,rep,name=topmuted,proto3" json:"topmuted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NotificationMessage) Reset()         { *m = NotificationMessage{} }
func (m *NotificationMessage) String() string { return proto.CompactTextString(m) }
func (*NotificationMessage) ProtoMessage()    {}
func (*NotificationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

func (m *NotificationMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotificationMessage.Unmarshal(m, b)
}
func (m *NotificationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotificationMessage.Marshal(b, m, deterministic)
}
func (m *NotificationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationMessage.Merge(m, src)
}
func (m *NotificationMessage) XXX_Size() int {
	return xxx_messageInfo_NotificationMessage.Size(m)
}
func (m *NotificationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationMessage proto.InternalMessageInfo

func (m *NotificationMessage) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NotificationMessage) GetSma() []*SMAMeasurement {
	if m != nil {
		return m.Sma
	}
	return nil
}

func (m *NotificationMessage) GetTopmuted() []*TopMutedData {
	if m != nil {
		return m.Topmuted
	}
	return nil
}

type SMAMeasurement struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Views                uint32   `protobuf:"varint,2,opt,name=views,proto3" json:"views,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SMAMeasurement) Reset()         { *m = SMAMeasurement{} }
func (m *SMAMeasurement) String() string { return proto.CompactTextString(m) }
func (*SMAMeasurement) ProtoMessage()    {}
func (*SMAMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

func (m *SMAMeasurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SMAMeasurement.Unmarshal(m, b)
}
func (m *SMAMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SMAMeasurement.Marshal(b, m, deterministic)
}
func (m *SMAMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMAMeasurement.Merge(m, src)
}
func (m *SMAMeasurement) XXX_Size() int {
	return xxx_messageInfo_SMAMeasurement.Size(m)
}
func (m *SMAMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_SMAMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_SMAMeasurement proto.InternalMessageInfo

func (m *SMAMeasurement) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SMAMeasurement) GetViews() uint32 {
	if m != nil {
		return m.Views
	}
	return 0
}

type TopMutedData struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Views                uint32   `protobuf:"varint,2,opt,name=views,proto3" json:"views,omitempty"`
	Time                 string   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Duration             string   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopMutedData) Reset()         { *m = TopMutedData{} }
func (m *TopMutedData) String() string { return proto.CompactTextString(m) }
func (*TopMutedData) ProtoMessage()    {}
func (*TopMutedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}

func (m *TopMutedData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopMutedData.Unmarshal(m, b)
}
func (m *TopMutedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopMutedData.Marshal(b, m, deterministic)
}
func (m *TopMutedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopMutedData.Merge(m, src)
}
func (m *TopMutedData) XXX_Size() int {
	return xxx_messageInfo_TopMutedData.Size(m)
}
func (m *TopMutedData) XXX_DiscardUnknown() {
	xxx_messageInfo_TopMutedData.DiscardUnknown(m)
}

var xxx_messageInfo_TopMutedData proto.InternalMessageInfo

func (m *TopMutedData) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *TopMutedData) GetViews() uint32 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *TopMutedData) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *TopMutedData) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeMessage)(nil), "proto.SubscribeMessage")
	proto.RegisterType((*NotificationMessage)(nil), "proto.NotificationMessage")
	proto.RegisterType((*SMAMeasurement)(nil), "proto.SMAMeasurement")
	proto.RegisterType((*TopMutedData)(nil), "proto.TopMutedData")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x71, 0xdd, 0x96, 0xe6, 0x28, 0x1f, 0x72, 0xf9, 0xb0, 0x3a, 0x45, 0x59, 0xc8, 0x54,
	0x50, 0xd9, 0xd8, 0x90, 0x10, 0x5b, 0x18, 0x5c, 0xc4, 0xee, 0x26, 0x06, 0x2c, 0x35, 0x76, 0x14,
	0x3b, 0x44, 0xcc, 0xfc, 0xe3, 0x28, 0x76, 0x12, 0xa5, 0xa8, 0x53, 0xde, 0x3b, 0xbf, 0xf8, 0x7c,
	0xbf, 0x83, 0x73, 0x53, 0x6d, 0x4d, 0x5a, 0xca, 0xad, 0x58, 0x15, 0xa5, 0xb6, 0x9a, 0x4c, 0xdc,
	0x27, 0xda, 0xc1, 0xc5, 0xa6, 0x3b, 0x49, 0x84, 0x31, 0xfc, 0x53, 0x10, 0x02, 0xe3, 0x92, 0x5b,
	0x41, 0x51, 0x88, 0xe2, 0x53, 0xe6, 0x74, 0x53, 0xb3, 0x3f, 0x85, 0xa0, 0x23, 0x5f, 0x6b, 0x34,
	0xa1, 0x70, 0x9c, 0x7e, 0x71, 0xa5, 0xc4, 0x8e, 0xe2, 0x10, 0xc5, 0x01, 0xeb, 0x2c, 0xb9, 0x86,
	0x69, 0x2d, 0x55, 0xa6, 0x6b, 0x3a, 0x76, 0xf9, 0xd6, 0x45, 0xbf, 0x08, 0x16, 0xaf, 0xda, 0xca,
	0x0f, 0x99, 0x72, 0x2b, 0xb5, 0x1a, 0x74, 0xcc, 0xb8, 0xe5, 0x14, 0x85, 0x38, 0x0e, 0x98, 0xd3,
	0xe4, 0x16, 0xb0, 0xc9, 0x39, 0x1d, 0x85, 0x38, 0x3e, 0x59, 0x5f, 0xf9, 0x57, 0xaf, 0x36, 0xc9,
	0x53, 0x22, 0xb8, 0xa9, 0x4a, 0x91, 0x0b, 0x65, 0x59, 0x93, 0x20, 0x77, 0x30, 0xb3, 0xba, 0xc8,
	0x2b, 0x2b, 0x32, 0x8a, 0x5d, 0x7a, 0xd1, 0xa6, 0xdf, 0x74, 0x91, 0x34, 0xe5, 0x67, 0x6e, 0x39,
	0xeb, 0x43, 0xd1, 0x23, 0x9c, 0xed, 0xdf, 0xe3, 0xa6, 0x93, 0xb9, 0x9f, 0x18, 0x33, 0xa7, 0xc9,
	0x25, 0x4c, 0xbe, 0xa5, 0xa8, 0x4d, 0x3b, 0xb2, 0x37, 0x91, 0x82, 0xf9, 0xf0, 0xd6, 0x21, 0x03,
	0xb4, 0xcf, 0xe0, 0xe0, 0xff, 0x7d, 0x27, 0x0f, 0xcc, 0x77, 0x5a, 0xc2, 0x2c, 0xab, 0x4a, 0x07,
	0xc4, 0xf1, 0x0a, 0x58, 0xef, 0xd7, 0xef, 0x30, 0x6f, 0xf7, 0x53, 0x34, 0x9e, 0xbc, 0x40, 0xd0,
	0xef, 0x8b, 0xdc, 0x74, 0x54, 0xfe, 0x6d, 0x70, 0xb9, 0x6c, 0x0f, 0x0e, 0xb0, 0x8e, 0x8e, 0x62,
	0x74, 0x8f, 0xb6, 0x53, 0x17, 0x78, 0xf8, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xad, 0xee, 0xbf,
	0x18, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscriptionClient is the client API for Subscription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriptionClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscription_SubscribeClient, error)
}

type subscriptionClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionClient(cc *grpc.ClientConn) SubscriptionClient {
	return &subscriptionClient{cc}
}

func (c *subscriptionClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Subscription_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Subscription_serviceDesc.Streams[0], "/proto.Subscription/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionSubscribeClient{stream}
	return x, nil
}

type Subscription_SubscribeClient interface {
	Send(*SubscribeMessage) error
	Recv() (*NotificationMessage, error)
	grpc.ClientStream
}

type subscriptionSubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriptionSubscribeClient) Send(m *SubscribeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subscriptionSubscribeClient) Recv() (*NotificationMessage, error) {
	m := new(NotificationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionServer is the server API for Subscription service.
type SubscriptionServer interface {
	Subscribe(Subscription_SubscribeServer) error
}

func RegisterSubscriptionServer(s *grpc.Server, srv SubscriptionServer) {
	s.RegisterService(&_Subscription_serviceDesc, srv)
}

func _Subscription_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubscriptionServer).Subscribe(&subscriptionSubscribeServer{stream})
}

type Subscription_SubscribeServer interface {
	Send(*NotificationMessage) error
	Recv() (*SubscribeMessage, error)
	grpc.ServerStream
}

type subscriptionSubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriptionSubscribeServer) Send(m *NotificationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subscriptionSubscribeServer) Recv() (*SubscribeMessage, error) {
	m := new(SubscribeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Subscription_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Subscription",
	HandlerType: (*SubscriptionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Subscription_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "subscribe.proto",
}
